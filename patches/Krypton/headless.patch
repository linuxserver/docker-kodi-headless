diff -Naur a/xbmc/Application.cpp b/xbmc/Application.cpp
--- a/xbmc/Application.cpp	2016-10-28 16:04:22.000000000 +0100
+++ b/xbmc/Application.cpp	2016-10-29 18:19:04.399497744 +0100
@@ -291,6 +291,7 @@
   m_bPlatformDirectories = true;

   m_bStandalone = false;
+  m_headless = false;
   m_bEnableLegacyRes = false;
   m_bSystemScreenSaverEnable = false;
   m_pInertialScrollingHandler = new CInertialScrollingHandler();
@@ -4334,15 +4335,18 @@

       if (!m_pPlayer->IsPlayingVideo())
       {
-        if(g_windowManager.GetActiveWindow() == WINDOW_FULLSCREEN_VIDEO)
+        if (!IsHeadless())
         {
-          g_windowManager.PreviousWindow();
-        }
-        else
-        {
-          CSingleLock lock(g_graphicsContext);
-          //  resets to res_desktop or look&feel resolution (including refreshrate)
-          g_graphicsContext.SetFullScreenVideo(false);
+          if(g_windowManager.GetActiveWindow() == WINDOW_FULLSCREEN_VIDEO)
+          {
+            g_windowManager.PreviousWindow();
+          }
+          else
+          {
+            CSingleLock lock(g_graphicsContext);
+            //  resets to res_desktop or look&feel resolution (including refreshrate)
+            g_graphicsContext.SetFullScreenVideo(false);
+          }
         }
       }

diff -Naur a/xbmc/Application.h b/xbmc/Application.h
--- a/xbmc/Application.h	2016-10-28 16:04:22.000000000 +0100
+++ b/xbmc/Application.h	2016-10-29 18:19:04.399497744 +0100
@@ -345,6 +345,16 @@
     return m_bStandalone;
   }

+  void SetHeadless(bool value)
+  {
+    m_headless = value;
+  }
+
+  bool IsHeadless() const
+  {
+    return m_headless;
+  }
+
   void SetEnableLegacyRes(bool value)
   {
     m_bEnableLegacyRes = value;
@@ -482,6 +492,7 @@
   bool m_skipGuiRender;

   bool m_bStandalone;
+  bool m_headless;
   bool m_bEnableLegacyRes;
   bool m_bTestMode;
   bool m_bSystemScreenSaverEnable;
diff -Naur a/xbmc/AppParamParser.cpp b/xbmc/AppParamParser.cpp
--- a/xbmc/AppParamParser.cpp	2016-10-28 16:04:22.000000000 +0100
+++ b/xbmc/AppParamParser.cpp	2016-10-29 18:19:04.399497744 +0100
@@ -137,6 +137,8 @@
     m_testmode = true;
   else if (arg.substr(0, 11) == "--settings=")
     g_advancedSettings.AddSettingsFile(arg.substr(11));
+  else if (arg == "--headless")
+    g_application.SetHeadless(true);
   else if (arg.length() != 0 && arg[0] != '-')
   {
     if (m_testmode)
diff -Naur a/xbmc/guilib/GUIDialog.cpp b/xbmc/guilib/GUIDialog.cpp
--- a/xbmc/guilib/GUIDialog.cpp	2016-10-28 16:04:22.000000000 +0100
+++ b/xbmc/guilib/GUIDialog.cpp	2016-10-29 18:19:04.399497744 +0100
@@ -169,7 +169,7 @@
   CSingleLock lock(g_graphicsContext);

   if (!g_windowManager.Initialized() ||
-      (m_active && !m_closing && !IsAnimating(ANIM_TYPE_WINDOW_CLOSE)))
+      (m_active && !m_closing && !IsAnimating(ANIM_TYPE_WINDOW_CLOSE)) || g_application.IsHeadless())
     return;

   // set running before it's added to the window manager, else the auto-show code
diff -Naur a/xbmc/platform/xbmc.cpp b/xbmc/platform/xbmc.cpp
--- a/xbmc/platform/xbmc.cpp	2016-10-28 16:04:22.000000000 +0100
+++ b/xbmc/platform/xbmc.cpp	2016-10-29 18:19:04.399497744 +0100
@@ -61,7 +61,7 @@
   g_RBP.LogFirmwareVerison();
 #endif

-  if (renderGUI && !g_application.CreateGUI())
+  if (renderGUI && !g_application.IsHeadless() && !g_application.CreateGUI())
   {
     CMessagePrinter::DisplayError("ERROR: Unable to create GUI. Exiting");
     return status;
diff -Naur a/xbmc/settings/SettingConditions.cpp b/xbmc/settings/SettingConditions.cpp
--- a/xbmc/settings/SettingConditions.cpp	2016-10-28 16:04:22.000000000 +0100
+++ b/xbmc/settings/SettingConditions.cpp	2016-10-29 18:21:10.456666117 +0100
@@ -344,6 +344,8 @@
 #else
   if (g_application.IsStandAlone())
     m_simpleConditions.insert("isstandalone");
+  if (g_application.IsHeadless())
+    m_simpleConditions.insert("is_headless");
 #endif

   if(CAEFactory::SupportsQualitySetting())
