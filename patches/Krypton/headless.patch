diff -Naur kodi-orig/xbmc/Application.cpp kodi-src/xbmc/Application.cpp
--- kodi-orig/xbmc/Application.cpp	2016-11-30 19:37:15.849791236 +0000
+++ kodi-src/xbmc/Application.cpp	2016-11-30 19:54:14.337774145 +0000
@@ -279,6 +279,7 @@
   , m_lastRenderTime(0)
   , m_skipGuiRender(false)
   , m_bStandalone(false)
+  , m_headless(false)
   , m_bEnableLegacyRes(false)
   , m_bTestMode(false)
   , m_bSystemScreenSaverEnable(false)
@@ -4333,15 +4334,18 @@
 
       if (!m_pPlayer->IsPlayingVideo())
       {
-        if(g_windowManager.GetActiveWindow() == WINDOW_FULLSCREEN_VIDEO)
+        if (!IsHeadless())
         {
-          g_windowManager.PreviousWindow();
-        }
-        else
-        {
-          CSingleLock lock(g_graphicsContext);
-          //  resets to res_desktop or look&feel resolution (including refreshrate)
-          g_graphicsContext.SetFullScreenVideo(false);
+          if(g_windowManager.GetActiveWindow() == WINDOW_FULLSCREEN_VIDEO)
+          {
+            g_windowManager.PreviousWindow();
+          }
+          else
+          {
+            CSingleLock lock(g_graphicsContext);
+            //  resets to res_desktop or look&feel resolution (including refreshrate)
+            g_graphicsContext.SetFullScreenVideo(false);
+          }
         }
       }
 
diff -Naur kodi-orig/xbmc/Application.h kodi-src/xbmc/Application.h
--- kodi-orig/xbmc/Application.h	2016-11-30 19:37:15.849791236 +0000
+++ kodi-src/xbmc/Application.h	2016-11-30 19:39:07.165785728 +0000
@@ -344,6 +344,16 @@
     return m_bStandalone;
   }
 
+  void SetHeadless(bool value)
+  {
+    m_headless = value;
+  }
+
+  bool IsHeadless() const
+  {
+    return m_headless;
+  }
+
   void SetEnableLegacyRes(bool value)
   {
     m_bEnableLegacyRes = value;
@@ -481,6 +491,7 @@
   bool m_skipGuiRender;
 
   bool m_bStandalone;
+  bool m_headless;
   bool m_bEnableLegacyRes;
   bool m_bTestMode;
   bool m_bSystemScreenSaverEnable;
diff -Naur kodi-orig/xbmc/AppParamParser.cpp kodi-src/xbmc/AppParamParser.cpp
--- kodi-orig/xbmc/AppParamParser.cpp	2016-11-30 19:37:15.845791235 +0000
+++ kodi-src/xbmc/AppParamParser.cpp	2016-11-30 19:39:07.165785728 +0000
@@ -137,6 +137,8 @@
     m_testmode = true;
   else if (arg.substr(0, 11) == "--settings=")
     g_advancedSettings.AddSettingsFile(arg.substr(11));
+  else if (arg == "--headless")
+    g_application.SetHeadless(true);
   else if (arg.length() != 0 && arg[0] != '-')
   {
     if (m_testmode)
diff -Naur kodi-orig/xbmc/guilib/GUIDialog.cpp kodi-src/xbmc/guilib/GUIDialog.cpp
--- kodi-orig/xbmc/guilib/GUIDialog.cpp	2016-11-30 19:37:15.917791236 +0000
+++ kodi-src/xbmc/guilib/GUIDialog.cpp	2016-11-30 19:39:07.165785728 +0000
@@ -169,7 +169,7 @@
   CSingleLock lock(g_graphicsContext);
 
   if (!g_windowManager.Initialized() ||
-      (m_active && !m_closing && !IsAnimating(ANIM_TYPE_WINDOW_CLOSE)))
+      (m_active && !m_closing && !IsAnimating(ANIM_TYPE_WINDOW_CLOSE)) || g_application.IsHeadless())
     return;
 
   // set running before it's added to the window manager, else the auto-show code
diff -Naur kodi-orig/xbmc/platform/xbmc.cpp kodi-src/xbmc/platform/xbmc.cpp
--- kodi-orig/xbmc/platform/xbmc.cpp	2016-11-30 19:37:15.973791237 +0000
+++ kodi-src/xbmc/platform/xbmc.cpp	2016-11-30 19:39:07.165785728 +0000
@@ -61,7 +61,7 @@
   g_RBP.LogFirmwareVerison();
 #endif
 
-  if (renderGUI && !g_application.CreateGUI())
+  if (renderGUI && !g_application.IsHeadless() && !g_application.CreateGUI())
   {
     CMessagePrinter::DisplayError("ERROR: Unable to create GUI. Exiting");
     return status;
diff -Naur kodi-orig/xbmc/settings/SettingConditions.cpp kodi-src/xbmc/settings/SettingConditions.cpp
--- kodi-orig/xbmc/settings/SettingConditions.cpp	2016-11-30 19:37:15.985791237 +0000
+++ kodi-src/xbmc/settings/SettingConditions.cpp	2016-11-30 19:39:07.165785728 +0000
@@ -336,6 +336,8 @@
 #else
   if (g_application.IsStandAlone())
     m_simpleConditions.insert("isstandalone");
+  if (g_application.IsHeadless())
+    m_simpleConditions.insert("is_headless");
 #endif
 
   if(CAEFactory::SupportsQualitySetting())
